テキストエディタを使ってみよう
==============================

-  書いた人: Kenichi Ito(nichiden_27)
-  更新日時: 2017/04/26
-  実行に必要な知識・技能: 特になし
-  難易度: 1/常識の範囲
-  情報の必須度: 3/必要な場合がある

概要
----

コードや文章をたくさん書くようになると、テキストエディタにこだわりたくなってきます。
最近のエディタの特徴などについて書きます。

最近は複数OSで作業することも珍しくなくなってきたので、Windows/Mac OS
X/Linuxのどれでも使えることを重視して紹介します。

Atom
----

`atom.io <https://atom.io>`__

`GitHub <https://github.com>`__\ が開発しているエディタ。
`PV <https://www.youtube.com/watch?time_continue=2&v=Y7aEiVwBAdk>`__\ が面白いのでぜひ観よう。

“A hackable text
editor”と銘打っており、プログラマが\ **自由にカスタマイズして使える**\ ことを売りにしている。
とはいえ、標準の状態で既に使いやすいので、プログラマでなくともぜひ触れてみて頂きたい。

.. figure:: _media/atom.png
   :alt: Atomの画面例

   Atomの画面例

Markdownの文書を書く場合、\ ``Ctrl(Cmd)+Shift+M``\ を押すと右に\ **プレビュー画面**\ を表示してくれる。
いわゆるWYSIWYG(表示と処理結果が一致)なエディタとして使用できるわけだ。
プレビューは編集内容に合わせてリアルタイムで更新される。
Markdown以外にも、プラグインを追加することで様々な言語のプレビューに対応できる。

使い勝手としてはほぼ不満のないAtomだが、\ **メモリを消費しすぎる**\ ことがある。
AtomはChromeのオープンソース版であるChromiumをベースに動いている。
このため本質的にはChromeが起動しているのと変わらず、”Atom
Helper”なるプロセスがメモリを占有してしまうのだ。

重く感じたら、不要なファイルは閉じるなど対策しよう。
Markdown文書がある程度長い場合は、リアルタイムのプレビューを非表示にするのも効果がある。

Visual Studio Code(VSCode)
--------------------------

`code.visualstudio.com <https://code.visualstudio.com>`__

Microsoft(MS)が開発しているエディタ。
MSは最近オープンソース化・クロスプラットフォーム化に舵を切っており、VSCodeも各OS向けに無償提供されている。

Atomより後発で、現在も開発が活発である。
最近のアップデートでAtomと遜色ない機能を備えてきており、Markdownプレビューももちろん可能。

.. figure:: _media/vscode.png
   :alt: Visual Studio Codeの画面例

   Visual Studio Codeの画面例

また、Visual
Studio譲りの超強力な補完機能である\ ``IntelliSense``\ をいくつかの言語で利用できる。
コーディングの機会が多い人にとっても有力な選択肢となりそうだ。

今後も、アップデートの度に新機能の追加が期待でき、さらに使い勝手が向上する可能性もある。
Atomを自力でカスタマイズしていくのが面倒に感じたら、VSCodeの豊富な機能を使いこなすのもいいかもしれない。

CUIエディタ
-----------

CUIエディタを使う理由
~~~~~~~~~~~~~~~~~~~~~

CUI(コマンドライン)のテキストエディタで有名なのは\ **VimとEmacs**\ だ。
この二つは宗教戦争的なネタにされがちだが、両者とも実用に足る機能を十分備えているからこそ「Vim派」や「Emacs派」が生まれるとも言える。

CUIエディタはキー入力のみで操作する必要があるのでとっつきにくいが、Vim/Emacs\ **いずれかの基本操作**\ くらいは覚えて損はないだろう。
ちょっとしたファイルの書き換えがしたい時など、ターミナルの画面を離れずに編集ができると効率がいい。
また、ssh接続してのリモート作業などでCUIしか触れなくても、VimやEmacsならほとんどの場合使用できる。

設定ファイル
~~~~~~~~~~~~

キーボードでの操作に慣れてくると、CUIエディタを好んで使うようになるかもしれない。
こうなるとデフォルトの設定では物足りないし、作業効率が悪い。
**設定ファイルやプラグイン**\ を使い、自分に合ったエディタにしてみよう。

Vimなら\ ``.vimrc``\ 、Emacsなら\ ``.emacs.el``\ というファイルをホームディレクトリに作ると読み込んでくれる。
ネットにオススメの設定がたくさん落ちているので、いいと思ったものを集めれば自分用設定の完成だ。
なお、起動中は変更しても反映されないので、コマンドで反映させるかエディタを再起動しよう。

`GitHub <https://github.com>`__\ などで自分の設定ファイルを管理しておくと、他の環境で作業する時でも設定を簡単に共有できる。
どこの環境でも自分好みの操作感をそのまま引き継げるのは、CUIテキストエディタの特権かもしれない。
